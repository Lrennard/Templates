http:

  routers:
    Adguard:
      entryPoints:
        - https
      rule: 'Host(`adguard.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: Adguard
    AraknisSwitch:
      entryPoints:
        - https
      rule: 'Host(`arak24p.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: AraknisSwitch
    CH_AP:
      entryPoints:
        - https
      rule: 'Host(`chap.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: HomeAssistant
    GP_AP:
      entryPoints:
        - https
      rule: 'Host(`gpnet.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: GP_AP
    Iot_AP:
      entryPoints:
        - https
      rule: 'Host(`iotap.cornouiller.xyz`)'
      middlewares: 
        - default-headers
      tls: {}
      service: Iot_AP
    HomeAssistant:
      entryPoints:
        - https
      rule: 'Host(`home.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: HomeAssistant
    HomeAssistant2:
      entryPoints:
        - https
      rule: 'Host(`home2.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: HomeAssistant2
    Orca:
      entryPoints:
        - https
      rule: 'Host(`orca.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: Orca
    MineOS:
      entryPoints:
        - https
      rule: 'Host(`mineos.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: MineOS
    Proxmox:
      entryPoints:
        - https
      rule: 'Host(`teller.cornouiller.xyz`)'
      middlewares: 
        - default-headers
      tls: {}
      service: Proxmox
    Pihole:
      entryPoints:
        - https
      rule: 'Host(`pihole.cornouiller.xyz`)'
      middlewares:
        - default-headers
        - pihole-redirect 
      tls: {}
      service: Pihole
    Pihole2:
      entryPoints:
        - https
      rule: 'Host(`pihole2.cornouiller.xyz`)'
      middlewares: 
        - default-headers
        - pihole2-redirect
      tls: {}
      service: Pihole2
    PfSense:
      entryPoints:
        - https
      rule: 'Host(`pf.cornouiller.xyz`)'
      middlewares: 
        - default-headers
      tls: {}
      service: PfSense
    Portainer:
      entryPoints:
        - https
      rule: 'Host(`portainer.cornouiller.xyz`)'
      middlewares: 
        - default-headers
      tls: {}
      service: Portainer
    StableDiffusion:
      entryPoints:
        - https
      rule: 'Host(`sdwebui.cornouiller.xyz`)'
      middlewares:
        - default-headers 
      tls: {}
      service: StableDiffusion
    Truenas:
      entryPoints:
        - https
      rule: 'Host(`tnas.cornouiller.xyz`)'
      middlewares: 
        - default-headers
      tls: {}
      service: Truenas
       ## Dashboards's ##
    NetDash:
      entryPoints:
        - https
      rule: 'Host(`netdash.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: NetDash
    D_NetDash:
      entryPoints:
        - https
      rule: 'Host(`denetdash.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: D_NetDash
    SHostDash:
      entryPoints:
        - https
      rule: 'Host(`shostdash.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: SHostDash
    IotDash:
      entryPoints:
        - https
      rule: 'Host(`iotdash.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: IotDash
    WebDash:
      entryPoints:
        - https
      rule: 'Host(`webdash.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: WebDash 
       ## WLEDS' ##
    LR_TV_WLED:
      entryPoints:
        - https
      rule: 'Host(`ltrvwled.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: LR_TV_WLED
    Mirror_WLED:
      entryPoints:
        - https
      rule: 'Host(`mirror.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: Mirror_WLED
    Office_WLED:
      entryPoints:
        - https
      rule: 'Host(`monwled.cornouiller.xyz`)'
      middlewares:
        - default-headers
      tls: {}
      service: Office_WLED
           ## SERVICES EXAMPLE ##
  services:
    Adguard:
      loadBalancer:
        servers:
          - url: "https://10.10.11.20:3000"
        passHostHeader: true
    AraknisSwitch:
      loadBalancer:
        servers:
          - url: "http://10.10.11.13:80"
        passHostHeader: true
    CH_AP:
      loadBalancer:
        servers:
          - url "https://10.10.11.9"
        passHostHeader: true
    GP_AP:
      loadBalancer:
        servers:
          - url: "http://10.10.55.9:80"
        passHostHeader: true
    Iot_AP:
      loadBalancer:
        servers:
          - url: "https://10.10.44.9"
        passHostHeader: true
    HomeAssistant:
      loadBalancer:
        servers:
          - url "http://10.10.22.19:8123"
        passHostHeader: true
    HomeAssistant2:
      loadBalancer:
        servers:
          - url: "http://10.10.44.19:8123"
        passHostHeader: true
    MineOS:
      loadBalancer:
        servers:
          - url: "https://10.10.22.30:8443"
        passHostHeader: true
    Orca:
      loadBalancer:
        servers:
          - url: "http://10.10.22.22:8080"
        passHostHeader: true
    Proxmox:
      loadBalancer:
        servers:
          - url: "https://10.10.22.11:8006"
        passHostHeader: true
    Pihole:
      loadBalancer:
        servers:
          - url: "http://10.10.22.40:80"
        passHostHeader: true
    Pihole2:
      loadBalancer:
        servers:
          - url: "http://10.10.22.18:80"
        passHostHeader: true
    PfSense:
      loadBalancer:
        servers:
          - url: "https://10.10.11.10:443"
        passHostHeader: true
    Portainer:
      loadBalancer:
        servers:
          - url: "https://10.10.22.14:9443"
        passHostHeader: true
    StableDiffusion:
      loadBalancer:
        servers:
          - url: "http://10.10.22.51:7860"
        passHostHeader: true
    Truenas:
      loadBalancer:
        servers:
          - url: "https://10.10.22.103"
        passHostHeader: true
          ## DashBoard's ##
    NetDash:
      loadBalancer:
        servers:
          - url: "https://10.10.22.14:7443"
        passHostHeader: true
    D_NetDash:
      loadBalancer:
        servers:
          - url: "https://10.10.22.14:881"
        passHostHeader: true
    SHostDash:
      loadBalancer:
        servers:
          - url: "https://10.10.22.14:883"
        passHostHeader: true
    IotDash:
      loadBalancer:
        servers:
          - url: "http://10.10.22.14:884"
        passHostHeader: true
    WebDash:
      loadBalancer:
        servers:
          - url: "https://10.10.22.14:882"
        passHostHeader: true
          ## WLEDS' ##
    LR_TV_WLED:
      loadBalancer:
        servers:
          - url: "http://10.10.44.21:80"
        passHostHeader: true
    Mirror_WLED:
      loadBalancer:
        servers:
          - url: "http://10.10.44.22:80"
        passHostHeader: true
    Office_WLED:
      loadBalancer:
        servers:
          - url: "http://10.10.22.24:80"
        passHostHeader: true
          ## MIDDLEWARES ##
  middlewares:
    https-redirect:
       redirectScheme:
         scheme: https
    default-headers:
      headers:
        frameDeny: true
       #sslRedirect: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 15552000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: https
    pihole-redirect:
      redirectRegex:
        regex: "^https?://pihole.cornouiller.xyz/$"
        replacement: "https://pihole.cornouiller.xyz/admin/"
    pihole2-redirect:
      redirectRegex:
        regex: "^https?://pihole2.cornouiller.xyz/$"
        replacement: "https://pihole2.cornouiller.xyz/admin/"


    # Only Allow Local networks
    #local-ipwhitelist:
    # ipWhiteList:
     #  sourceRange: 
     #    - 127.0.0.1/32 # localhost
     #    - 172.16.0.0./16
     #    - 10.10.0.0/16
     #    - 10.0.100.0/24
  
    # Authelia guard
#    auth:
#      forwardauth:
#        address: http://auth:9091/api/verify?rd=https://auth.domain.com/ # replace auth with your authelia container name
#        trustForwardHeader: true
#        authResponseHeaders:
#          - Remote-User
#          - Remote-Groups
#          - Remote-Name
#          - Remote-Email
#  
    # Authelia basic auth guard
#    auth-basic:
#      forwardauth:
#        address: http://auth:9091/api/verify?auth=basic # replace auth with your authelia container name
#        trustForwardHeader: true
#        authResponseHeaders:
#          - Remote-User
#          - Remote-Groups
#          - Remote-Name
#          - Remote-Email

    # Security headers
    securityHeaders:
      headers:
        customResponseHeaders:
          X-Robots-Tag: "none,noarchive,nosnippet,notranslate,noimageindex"
          server: ""
          X-Forwarded-Proto: "https"
        sslProxyHeaders:
          X-Forwarded-Proto: https
        referrerPolicy: "strict-origin-when-cross-origin"
        hostsProxyHeaders:
          - "X-Forwarded-Host"
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        contentTypeNosniff: true
        browserXssFilter: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsSeconds: 63072000
        stsPreload: true
    secured:
      chain:
        middlewares:
        - default-whitelist
        - default-headers
# Only use secure ciphers - https://ssl-config.mozilla.org/#server=traefik&version=2.6.0&config=intermediate&guideline=5.6
tls:
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
