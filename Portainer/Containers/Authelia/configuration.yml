---
###############################################################
#                   Authelia configuration                    #
###############################################################

server:
  host: 0.0.0.0
  port: 9091
log:
  level: debug
theme: dark
# This secret can also be set using the env variables AUTHELIA_JWT_SECRET_FILE
jwt_secret: put_some_secret_strings_here
default_redirection_url: https://auth.example.com
totp:
  issuer: authelia.com

# duo_api:
#  hostname: api-123456789.example.com
#  integration_key: ABCDEF
#  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
#  secret_key: 1234567890abcdefghifjkl

ntp:
  ## NTP server address.
  address: "time.cloudflare.com:123"

  ## NTP version.
  version: 4

  ## Maximum allowed time offset between the host and the NTP server.
  max_desync: 3s

  ## Disables the NTP check on startup entirely. This means Authelia will not contact a remote service at all if you
  ## set this to true, and can operate in a truly offline mode.
  disable_startup_check: false

  ## The default of false will prevent startup only if we can contact the NTP server and the time is out of sync with
  ## the NTP server more than the configured max_desync. If you set this to true, an error will be logged but startup
  ## will continue regardless of results.
  disable_failure: false

authentication_backend:
  file:
    path: /config/users_database.yml
    password:
      algorithm: argon2
      # Recommended Parameters
      # Uses 2 GiB memory, then immediately releases it.
      # See https://www.authelia.com/reference/guides/passwords/#recommended-parameters-argon2        
      # See https://www.rfc-editor.org/rfc/rfc9106.html#section-4 for details on tuning the parameters for your hardware.
      # After saving configuration file, password hash can be generated by running: docker run -v ./configuration.yml:/configuration.yml --rm authelia/authelia:latest authelia crypto hash generate --config /configuration.yml --password 'yourpassword'
      argon2:
        variant: argon2id
        iterations: 1
        memory: 2097152
        parallelism: 4
        key_length: 32
        salt_length: 16
      # Recommended Parameters when constrained by low memory or low powered hardware. Uses 64 KiB memory, then immediately releases it.
      # argon2:
      #   variant: argon2id
      #   iterations: 3
      #   memory: 65536
      #   parallelism: 4
      #   key_length: 32
      #   salt_length: 16

access_control:
  default_policy: deny
  rules:
    # Rules applied to everyone
    - domain: example.com
      policy: bypass
    - domain: internal.example.com
      policy: one_factor
    - domain: external.example.com
      policy: two_factor
    
session:
  name: authelia_session
  # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
  secret: unsecure_session_secret
  expiration: 3600  # 1 hour
  inactivity: 900  # 15 minutes
  domain: example.com  # Should match whatever your root protected domain is

  # redis:
  #   host: redis
  #   port: 6379
  #   # This secret can also be set using the env variables AUTHELIA_SESSION_REDIS_PASSWORD_FILE      
  #   # password: authelia

regulation:
  max_retries: 3
  find_time: 120
  ban_time: 300

storage:
  encryption_key: a_very_important_secret # Now required
  local:
    path: /config/db.sqlite3

notifier:
  smtp:
    username: 'EMAIL@EXAMPLE.COM'
      # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE      
    password: 'SMTP_SERVER_TOKEN'
    host: 'smtp.yoursmtp_server.com'
    port: 25
    sender: 'AUTH@EXAMPLE.COM'
##filesystem:
  ##filename: /config/notification.txt
...